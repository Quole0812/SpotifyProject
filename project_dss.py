# -*- coding: utf-8 -*-
"""project dss.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V6dFlCA4lcv9fQrEQW9C-Gs50FdNFBFH
"""

import sqlite3

# connect to an in-memory SQLite database
conn = sqlite3.connect(':memory:')
cursor = conn.cursor()

# drop the table if it exists to start fresh
cursor.execute("DROP TABLE IF EXISTS Songs;")

# create the table
cursor.execute('''
CREATE TABLE Songs (
    Song TEXT,
    Artist TEXT,
    PeakPosition INTEGER,
    WeeksInCharts INTEGER,
    Category TEXT,
    Winner TEXT,
    Duration_ms INTEGER,
    Explicit TEXT,
    Popularity INTEGER
);
''')

# insert data into the table
cursor.executemany('''
INSERT INTO Songs (Song, Artist, PeakPosition, WeeksInCharts, Category, Winner, Duration_ms, Explicit, Popularity)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);
''', [
    ('360', 'Charli xcx', 41, 11, 'Record of the Year', 'No', 133805, 'True', 82),
    ('A Bar Song (Tipsy)', 'Shaboozey', 1, 19, 'Best Country Solo Performance', 'No', 171291, 'True', 86),
    ('Apple', 'Charli xcx', 51, 5, 'Best Pop Solo Performance', 'No', 151739, 'False', 82),
    ('Big Mama', 'Latto', 1, None, 'Best Melodic Rap Performance', 'No', 174000, 'True', 58),
    ('Die With A Smile', 'Lady Gaga & Bruno Mars', 1, None, 'Best Pop Duo/Group Performance', 'Yes', 251667, 'False', 100),
    ('Enough (Miami)', 'Cardi B', 9, 14, 'Best Rap Performance', 'No', 158727, 'True', 64),
    ('Espresso', 'Sabrina Carpenter', 3, 19, 'Record of the Year', 'No', 175459, 'False', 67),
    ('Espresso', 'Sabrina Carpenter', 3, 19, 'Record of the Year', 'No', 175459, 'False', 67),
    ('Espresso', 'Sabrina Carpenter', 3, 19, 'Best Pop Solo Performance', 'Yes', 175459, 'False', 67),
    ('Espresso', 'Sabrina Carpenter', 3, 19, 'Best Pop Solo Performance', 'Yes', 175459, 'False', 67),
    ('Houdini', 'Eminem', 2, 12, 'Best Rap Performance', 'No', 227239, 'True', 80),
    ('I Am Not Okay', 'Jelly Roll', 29, 10, 'Best Country Solo Performance', 'No', 198066, 'False', 77),
    ('Not Like Us', 'Kendrick Lamar', 1, 16, 'Record of the Year', 'Yes', 274192, 'True', 96),
    ('Not Like Us', 'Kendrick Lamar', 1, 16, 'Record of the Year', 'Yes', 274192, 'True', 96),
    ('Not Like Us', 'Kendrick Lamar', 1, 16, 'Best Rap Performance', 'Yes', 274192, 'True', 96),
    ('Not Like Us', 'Kendrick Lamar', 1, 16, 'Best Rap Performance', 'Yes', 274192, 'True', 96),
    ('Now And Then', 'The Beatles', 7, 2, 'Record of the Year', 'No', 248333, 'False', 66),
    ('Now And Then', 'The Beatles', 7, 2, 'Record of the Year', 'No', 248333, 'False', 66),
    ('Now And Then', 'The Beatles', 7, 2, 'Best Rock Performance', 'Yes', 248333, 'False', 66),
    ('Now And Then', 'The Beatles', 7, 2, 'Best Rock Performance', 'Yes', 248333, 'False', 66),
    ('Residuals', 'Chris Brown', 1, None, 'Best R&B Performance', 'No', 215178, 'False', 75),
    ('Saturn', 'SZA', 6, 26, 'Best R&B Performance', 'No', 186191, 'False', 82),
    ('Yeah Glo!', 'GloRilla', 28, 25, 'Best Rap Performance', 'No', 142702, 'True', 69)
])

# commit the transaction
conn.commit()

# verify the data
cursor.execute("SELECT * FROM Songs;")
rows = cursor.fetchall()
for row in rows:
    print(row)

# ingested data
cursor.execute("SELECT COUNT(*) FROM Songs;")
num_records = cursor.fetchone()[0]

# get columns by fetching one row and checking its length
cursor.execute("SELECT * FROM Songs LIMIT 1;")
first_row = cursor.fetchone()
num_columns = len(first_row) if first_row else 0

print("Summary of Ingested Data")
print(f"Number of records: {num_records}")
print(f"Number of columns: {num_columns}")
print()

# removes duplicates in the data
cursor.execute('''
CREATE TABLE Songs_Transformed AS
SELECT DISTINCT * FROM Songs;
''')

# transformed data
cursor.execute("SELECT COUNT(*) FROM Songs_Transformed;")
num_records_transformed = cursor.fetchone()[0]

# get columns in the transformed table
cursor.execute("SELECT * FROM Songs_Transformed LIMIT 1;")
first_row_transformed = cursor.fetchone()
num_columns_transformed = len(first_row_transformed) if first_row_transformed else 0

print("Summary of Transformed Data")
print(f"Number of records (after deduplication): {num_records_transformed}")
print(f"Number of columns: {num_columns_transformed}")

# close the connection
conn.close()